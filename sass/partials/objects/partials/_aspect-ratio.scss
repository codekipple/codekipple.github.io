/*  ==========================================================================
    Objects:Aspect Ratio
    ==========================================================================

    This version was taken from the brilliant SUIT framework - suit-flex-embed v1.5.0 | MIT License | github.com/suitcss
    The class names were changed.

    Intrinsic ratio trick, aka 'The Padding-Bottom Hack' http://mobile.smashingmagazine.com/2013/09/16/responsive-images-performance-problem-case-study

    the ratio of the img-container is specified in each elements styles that takes use of this.

    * For use with media embeds such as videos, slideshows, or even images
    * that need to retain a specific aspect ratio but adapt to the width of their
    * containing element.

    To get the padding-bottom value: height / width * 100

    exampled usage:-

    <div class="aspect-ratio"></div>

    .aspect-ratio:before {
        $width: 500;
        $height: 340;
        padding-bottom: percentage($height/$width);
    }
*/

.aspect-ratio {
    display: block;
    overflow: hidden;
    position: relative;
}

/**
 * A pseudo-element shunt is used to provide support for `max-height`. The
 * `max-height` property has no affect when using a percentage-padding to set
 * the aspect ratio.
 */

.aspect-ratio:before {
    content: "";
    display: block;
    width: 100%;
}

/**
 * Descendant: media element
 *
 * Utility of the component is improved by provide an explicit descendant
 * class. However, it will work automatically for iframes, embeds, and objects
 * to account for times when you cannot modify the attributes for 3rd party
 * widget code.
 */

.aspect-ratio__item,
.aspect-ratio iframe,
.aspect-ratio embed,
.aspect-ratio object {
    bottom: 0;
    left: 0;
    position: absolute;
    top: 0;
    width: 100%;
}

.aspect-ratio iframe,
.aspect-ratio embed,
.aspect-ratio object {
    height: 100%;
}